DAO 수정한 예제
- 스프링 JDBC 관련 설정 및 수정 및 추가한 코딩 설명하세요
<강사님>
스프링 JDBC + MyBatis
1. DB 연동 - DataSource 객체 필요
2. 스프링빈 등록 3가지 방법
	3) 테스트 용도의 dataSource 등록
	2) 커넥션 풀 사용해서 dataSource 등록
	1) JNDI 이용한 dataSource 등록
3. jdbcTemplate DB 연동 처리 코딩 - 중복 제거
	4가지 종류 등등 중 jdbcTemplate 등록
4. NoticeDao.java의 모든 메서드 수정
	
	


<내가 쓴거>
[ 설정 관련 ]
	DataSource 방식을 사용하고 있다.
	세가지 방식의 설정을 지원
	1) 커넥션 풀 이용
	2) JNDI 이용
	3) DriverManager 이용
	위 3가지 중에 3)을 사용
	
	JDBC와 관련된 템플릿 클래스 4가지 중 JdbcTemplate 사용 
	dispatcher-servlet.xml에
	JdbcTemplate 빈 객체와 DataSource 빈 객체를 생성
	JdbcTmplate 객체에 의존 주입
	
	NotcieDao.java에
	private JdbcTemplate jdbcTemplate 필드 생성 후 @Autowired 애노테이션 추가하여 자동으로 주입
	
[DAO에 수정 및 추가한 코딩]
	공지사항 목록을 가져오는 메서드는
	query() 메서드를 사용하여 sql, new Obeject[] {}로 ? 해당하는 값을 설정, new BeanPropertyRowMapper로 ResultSet을 Bean 객체인 Notice로 변환 후
	List로 돌려줌
	
	검색한 결과의 총 레코드 수를 반환하는 메서드는
	queryForInt() 메서드로 sql과 new Object[] {} 로 query 파라미터를 넘겨주고 rowCount를 리턴
	
	공지사항을 쓰는 메서드는 커맨드 객체를 매개변수로 받고
	update() 메서드를 사용하여	sql, notice의 제목, 내용, 작성자, 파일경로를 넘겨주어 rowCount를 리턴
	
	공지사항을 삭제하는 메서드는 글번호르 매개변수를 받고
	update() 매서드를 사용하여 sql 매개변수와 글번호(seq)를 매개변수로 주어 삭제 후 rowCount를 리턴
	
	공지사항을 수정하는 메서드는
	update() 메서드를 사용하여 sql 매개변수와 notice의 제목, 내용, 파일경로, 글번호를 매개변수로 주어 rowCount 리턴
	
	공지사항 상세보기 메서드는
	queryForObject 메서드를 사용하여 sql, new Object[] {}로 글번호를 넘기고, ParameterizedBeanPropertyRowMapper를 사용하여
	ResultSet을 Bean 객체로 변환 후 Notice 객체로 돌려줌

<메서드 관련>
query() - 여러 개의 레코드를 조회할 때 사용
queryForList() - 단일 컬럼 값을 조회할 때 사용
queryForObject() - 단일 레코드를 조회할 때 사용
update() - 삽입/수정/삭제할 때 사용
