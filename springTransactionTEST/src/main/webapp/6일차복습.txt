스프링 트랜잭션에 대해서 관련 설정 및 코딩 설명을 하세요

[공통]
	스프링에서 JDBC나 MyBatis로 트랜잭션 처리를 하기 위해
	DataSourceTransactionManager 인터페이스를 구현한 클래스를 트랜잭션 처리 관리자로 빈 객체 등록해야한다.
	dispatcher-service.xml는 공통으로 사용할 빈을 등록한 곳으로
	그 안에서 DataSource와 DataSourceTransactionManager 빈 객체를 등록하였다.
	DataSourceTransactionManager는 DataSource를 주입

	스프링의 트랜잭션 지원은 2가지이다.
	1) 코드 기반의 트랜잭션 처리
	2) 선언적 트랜잭션 처리
		ㄴ xml 기반
		ㄴ @Transactional 애노테이션 사용

[02 관련]
	코드 기반의 트랜잭션 처리 예제로 개발자가 직접 코딩하여 처리한다.
	TransactionTemplate는 DataSourceTransactionManager를 주입받고 있다.
	트랜잭션 처리가 필요한 장소에서 트랜잭션 처리를 하는데 트랜잭션 템플릿을 사용하기 때문에
	@Autowired 애노테이션을 사용하여 TransactionTemplate 자동으로 주입 받는다.
	예제에서는 TransactionCallbackWitoutResult 콜백 함수를 사용하였다(돌려주는 값이 없을 때 사용하는 트랜잭션 콜백함수)
	해당 콜백 함수 안에서 공지사항 쓰기(INSERT)와 회원의 포인트 증가(UPDATE)하는 트랜잭션 처리를 하고 모두 완료되면 커밋이 된다.
	만약, 하나라도 실패시 롤백이 되어진다.

[03 관련]
	선언적 트랜잭션 처리 예제로 xml 기반 예제를 다루고 있다.
	dispatcher-servlet.xml 설정 파일에서
	<tx:advice>와 <aop:config> 태그를 이용하여 트랜잭션 처리를 한다.
	tx와 aop 태그를 사용하기 위해서 beans 태그에 설정을 추가하고
	<tx:advice> 태그로 트랜잭션 매니저를 설정 후 id 설정 ->
	<tx:method> 태그에서 name 속성으로 트랜잭션 처리를 할 메서드의 이름을 설정하고
	isolation, propagation, read-only, timeout은 기본 값으로 설정하였다.

	<aop:config> 태그 안에서 <aop:pointcut> 태그로 포인트컷을 AspectJ 표현식으로 설정하고
	<aop:advisor> 태그로 트랜잭션 매니저와 포인트컷을 설정해주었다.

	DAO 컨트롤러 메서드에서 기존의 코드 기반의 트랜잭션 처리 코딩을 다 지웠다.
	xml에서 설정했기 때문에 자동으로 트랜잭션 처리가 되어진다.

[04 관련]
	선언적 트랜잭션 처리 중 @Transactional 애노테이션을 이용한 설정 예제이다.
	트랜잭션 처리가 필요한 컨트롤러 메서드에 @Transactional 선언하고 propagation = Propagation.REQUIRED 기본 값으로 설정
	dispatcher-servlet.xml에 애노테이션 사용을 위해
	<tx:annotation-driven transaction-manager="transactionManager/> 태그를 추가 해준다.
	mode와 proxy-target-class는 기본 값으로 설정하였다.

	추가) 인터페이스 안에서 @Transactional 애노테이션을 선언해도 트랜잭션 처리가 필요한 메서드라고 인식을 하고
		어떤 클래스 안에 있는 모든 메서드가 트랜잭션이 필요하다면 클래스 위에 @Transactional 애노테이션을 선언하여 사용해도 된다.