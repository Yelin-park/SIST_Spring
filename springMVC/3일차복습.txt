1. springMVC 프로젝트 생성부터 어제 구현한 것 전부를
스프링 MVC 처리 과정 및 주요 구성 요소와 연관시켜 설명

<강사님과>
1) 다이나믹 웹 프로젝트로 springMVC 프로젝트 생성
2) 스프링 사용 방법
	- 메이븐 프로젝트라면 pox.mxl 모듈 추가
	- WEB-INF/lib 폴더 : [스프링 관련 모듈 + 의존 모듈 jar 추가] + ojdbc6.jar + tomcat-dbcp.jar 등등 필요한 JSP 때 사용한 라이브러리 추가
							ㄴ 이 모듈을 추가해서 스프링 사용 가능
3) index.jsp 파일 만들어서 테스트 실행

--- 스프링 MVC 설정 ---
*** 핸들러매핑과 핸들러어댑터, ViewResolver는 스프링 버전에 따라
자동으로 생성되거나 직접 생성해주어야 하는게 달라짐(우리 예제에서는 자동생성)

4) Notice(공지사항), Member(회원) 테이블 생성
5) newlecture.vo 패키지 안에 Member.java, Notice.java 생성 (DB 테이블의 컬럼명 == 필드명)
6) newlecture.dao 패키지 안에 MemberDao.java(회원가입, 회원정보반환 메서드)
	NoticeDao.java 생성 - 공지사항 총레코드수, [목록], 수정, 삭제, 쓰기 메서드
											 ㄴ List<Notice> getNotices(page, field, query)
7) Service는 만들지 않음
8) webapp 폴더
	ㄴ css
	ㄴ customer(공지사항과 관련된 / 목록, 상세보기 등)
	ㄴ images
	ㄴ joinus(회원과 관련된 / 가입, 로그인 등)
	ㄴ index.jsp와 index.css 메인페이지
9) 
	(1) /customer/notice.htm 요청 -> front controller(MVC의 C인 컨트롤러)
				ㄴ 구현할 필요 없이 스프링에서 제공하는 :DispatcherServlet 클래스를 사용하여 web.xml에 등록
	(2) 요청에 대해 처리할 핸들러 검색은 :HandlerMapping 한다.
		dispatcher-servlet.xml에서 bean 객체의 name 속성 값을 검색해서 controller를 찾아옴
	(3) NoticeController 컨트롤러(핸들러) 찾아서 -> front controller(MVC의 C) 돌려줌
	(4) :HandlerAdapter (작업반장)에게 요청하면 NoticeController 컨트롤러에게 로직 처리 요청
	(5) NoticeController 컨트롤러가 로직 처리 실행 -> (NoticeService 지금은 없음) -> NoticeDao.java -> DB연동
		옛날에는 request.setAttribute("list", list) 였는데
		Model 객체만 따로 사용할 수 있지만
		ModelAndView 객체 mv이 에다가 addObject 사용해서 담고
		return mv
	(6) :HandlerAdapter(작업반장)가 처리된 mv 받아서 -> front controller(MVC의 C)에게 전달
	(7) :ViewResolver(작업반장)에게 응답 생성 요청 (p384 InternalResourceViewResolver 빈 등록 - 기본 jsp)
	(8) list.jsp 페이지를 처리된 결과를 mv에 넘김
		후에 jsp 페이지에서 ${test}

											
-------------------------------------------------------
<내가 적은 답>
1) 일단 메이븐 프로젝트가 아니고 다이나믹 웹 프로젝트를 만들었음
		ㄴ lib 폴더에 필요한 jar 파일 추가(ojdbc6.jar 등)
		ㄴ 스프링 주요 모듈 jar 추가
		ㄴ 스프링 주요 모듈 + 의존 모듈
			C:\spring-framework-3.0.2.RELEASE-with-docs\dist 에서 jar 파일만 다 추가하기
			aopalliance-1.0.0.jar
        	commons.logging-1.1.1.jar
        	weaver-1.6.8.RELEASE.jar
        	cglib-2.2.0.jar

2) 스프링 MVC는 디스패처 서블릿을 생성하고 프로퍼티 파일을 만들어서 매핑을 하지 않고
	web.xml에서 디스패처 서블릿(front 컨트롤러)을 등록하는데 스프링에서 제공하는 디스패처 클래스를 사용한다.
	요청URL은 .htm이며 요청URL과 컨트롤러(MVC의 M)의 매핑 작업은 HandlerMapping 구성요소가 검색하는데 이것을 따로 구현하지 않는다.
	+ 추가로 인코딩 하는 클래스도 스프링에서 제공하는 CharacterEncodingFilter 클래스를 사용하였다.


3) 빈 객체를 생성하고 조립해주는 스프링 컨테이너가 필요하다.
	Web에서는 WebXmlApplicationContext 클래스를 사용하는데 객체를 직접 생성하지 않고
	서버(톰캣)가 시작될 때 스프링 컨테이너를 만들어준다.
	web.xml에서 생성한 front 컨트롤러(서블릿)의 이름-servlet.xml으로 만들면 자동으로 찾아서 스프링 컨테이너를 생성한다.

4) 압축 받은 폴더 중 newlecture.dao 패키지 안에 있는 클래스와 newlecture.vo 패키지 안에 있는 클래스 컬럼명과 쿼리문 DB 계정 수정

5) 공지사항 페이징 처리하여 목록을 가져오기 위해서 controllers.customer 패키지 안에
	스프링에서 제공하는 Controller 인터페이스를 구현한 NoticeController 클래스를 생성하여
	ModelAndView 를 반환하는 handleRequest 메서드를 오버라이딩 + NoticeDao 필드를 생성하고 생성자와 getter/setter 선언

	메서드 안에는 NoticeDao 클래스의 getNotices 메서드를 호출해야하기 때문에
	dispatcher-servlet.xml 안에서 컨트롤러와 DAO 빈 객체를 생성 + 조립(DI)
	handleRequest 메서드 안에서 getNotices 메서드에 필요한 매개변수가 null일 때 조건문으로
	mv.addObject("list", list); 코딩으로 뿌려질 정보를 담고 (request.setAttribute("list", list) 코딩과 같은 의미)	    
	mv.setViewName("notice.jsp"); 코딩으로 뷰이름을 정한다(?)
	
	return mv; 뷰페이지에 ModelAndView 객체를 돌려준다.